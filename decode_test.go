package msgpack

import (
	"testing"
)

func BenchmarkDecodeBool(b *testing.B) {
	bytes := []byte{0xc2} // false
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeFixInt(b *testing.B) {
	bytes := []byte{0x7f} // 127
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeUInt(b *testing.B) {
	bytes := []byte{0xcc, 0xff} // 255
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeUInt16(b *testing.B) {
	bytes := []byte{0xcd, 0xff, 0xff} // 65535
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeUInt32(b *testing.B) {
	bytes := []byte{0xce, 0xff, 0xff, 0xff, 0xff} // 2**32 - 1
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeUInt64(b *testing.B) {
	bytes := []byte{0xce, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff} // 2**64 - 1
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeInt(b *testing.B) {
	bytes := []byte{0xd0, 0x80} // -128
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeInt16(b *testing.B) {
	bytes := []byte{0xd1, 0xff, 0x06} // -250
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeInt32(b *testing.B) {
	bytes := []byte{0xd2, 0xff, 0xff, 0x00, 0x01} // -65535
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeInt64(b *testing.B) {
	bytes := []byte{0xd3, 0xff, 0xff, 0xfe, 0xe0, 0x8e, 0x04, 0xf7, 0xd5} // -1234567890987
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeFixStr(b *testing.B) {
	// 1 alphabet (26 bytes)
	bytes := []byte{0xb9, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a}
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeStr8(b *testing.B) {
	// 10 alphabets (260 bytes)
	bytes := []byte{0xda, 0x1, 0x4, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a}
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeStr16(b *testing.B) {
	b.SkipNow() // needs implementation
}

func BenchmarkDecodeStr32(b *testing.B) {
	b.SkipNow() // needs implementation
}

func BenchmarkDecodeFixArray(b *testing.B) {
	// array numbers 1 - 15
	bytes := []byte{0x9f, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf}
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeArray16(b *testing.B) {
	// array numbers 0 - 127
	bytes := []byte{0xdc, 0x0, 0x80, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f}
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}
}

func BenchmarkDecodeFixMap(b *testing.B) {
	//{'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14}
	bytes := []byte{0x8f, 0xa1, 0x61, 0x0, 0xa1, 0x63, 0x2, 0xa1, 0x62, 0x1, 0xa1, 0x65, 0x4, 0xa1, 0x64, 0x3, 0xa1, 0x67, 0x6, 0xa1, 0x66, 0x5, 0xa1, 0x69, 0x8, 0xa1, 0x68, 0x7, 0xa1, 0x6b, 0xa, 0xa1, 0x6a, 0x9, 0xa1, 0x6d, 0xc, 0xa1, 0x6c, 0xb, 0xa1, 0x6f, 0xe, 0xa1, 0x6e, 0xd}
	for i := 0; i < b.N; i++ {
		Decode(&bytes, 0)
	}

}

func BenchmarkDecodeMap16(b *testing.B) {
	b.SkipNow() // needs implementation
}
